{"version":3,"sources":["webpack:///./src/app/pages/single-user-page/module.ts","webpack:///./src/app/pages/single-user-page/route.ts","webpack:///./src/app/pages/single-user-page/single-user-page.component.html","webpack:///./src/app/pages/single-user-page/single-user-page.component.ts"],"names":[],"mappings":"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","file":"pages-single-user-page-module.js","sourcesContent":["/*\nImport\n*/\n    // Angular\n    import { NgModule } from \"@angular/core\";\n    import { CommonModule } from \"@angular/common\"; //=> Obligatoire pour ngClass, ngIf, ...\n    import { FormsModule } from \"@angular/forms\"; //=> Obligatoire pour [(ngModel)]\n\n    // Inner\n    import { SingleUserPageComponent } from \"./single-user-page.component\";\n    import { ComponentRouter } from \"./route\";\n    import { HeaderModule } from \"../../shared/header/module\";\n    import { UserFormModule } from \"../../shared/user-form/module\";\n//\n\n\n/*\nDéfinition\n*/\n    @NgModule({\n        declarations: [ SingleUserPageComponent ],\n        imports: [ ComponentRouter, CommonModule, FormsModule, HeaderModule, UserFormModule ]\n    })\n//\n\n\n/*\nExport\n*/\n    export class Module{};\n//","/*\nImport\n*/\n    // Angular\n    import { ModuleWithProviders } from \"@angular/core\";\n    import { Routes, RouterModule } from \"@angular/router\";\n\n    // Inner\n    import { SingleUserPageComponent } from \"./single-user-page.component\";\n//\n\n/*\nDéfinir les routes dans un tableau de Routes\n*/\n    const routes: Routes = [\n        {\n            path: '',\n            component: SingleUserPageComponent\n        }\n    ];\n//\n\n/*\nExporter les routes\n*/\n    export const ComponentRouter: ModuleWithProviders = RouterModule.forChild(routes);\n//","module.exports = \"<app-header></app-header>\\n\\n<!-- Attendre le retour de l'api avant d'afficher les données -->\\n<main *ngIf=\\\"singleUser && singleUserData\\\">\\n    <section>\\n        <h2 [textContent]=\\\"pageTitle\\\"></h2>\\n        <article>\\n            <ul [ngClass]=\\\"{ 'isOpen': !toggleBoxe }\\\">\\n                <li><h3 [textContent]=\\\"singleUser.userName\\\"></h3></li>\\n                <li [textContent]=\\\"singleUser.email\\\"></li>\\n                <li [textContent]=\\\"singleUser.password\\\"></li>\\n                <li><button [textContent]=\\\"textButton.edit\\\" (click)=\\\"toggleBoxe = true\\\"></button></li>\\n            </ul>\\n            <!-- Formulaire pour modifier l'utilisateur -->\\n            <app-user-form\\n                [ngClass]=\\\"{ 'isOpen': toggleBoxe }\\\"\\n                [formData]=\\\"singleUserData\\\"\\n                [formType]=\\\"'edit'\\\"\\n                (sendData)=\\\"submitForm($event)\\\"\\n            ></app-user-form>\\n        </article>\\n    </section>\\n</main>\"","/*\nImport\n*/\n  // Angular\n  import { Component, OnInit } from '@angular/core';\n  import { ActivatedRoute } from \"@angular/router\"; // Pour récupérer le paramêtre d'une route\n\n  // Inner\n  import { UserService } from \"../../services/user/user.service\";\n  import { UserModel } from \"../../shared/_models/user.model\";\n  import { RegisterModel } from \"../../shared/_models/register.model\";\n// \n\n/*\nConfiguration et export\n*/\n  @Component({\n    selector: 'app-single-user-page',\n    templateUrl: './single-user-page.component.html',\n    styles: [`\n      app-user-form, ul{\n        height: 0;\n        overflow: hidden;\n        transition: height .3s;\n      }\n\n      .isOpen{\n        height: 35rem;\n        overflow: auto;\n      }\n    `]\n  })\n\n  export class SingleUserPageComponent implements OnInit {\n\n    /*\n    Variables\n    */\n      public pageTitle: string;\n      public singleUser: UserModel;\n      public singleUserData: RegisterModel;\n      private formError: number;\n      public textButton: any;\n      public toggleBoxe: boolean;\n    //\n\n    constructor(\n      // Injecter ActivatedRoute dans la class\n      private ActivatedRoute: ActivatedRoute,\n\n      // Injecter le service dans la class\n      private UserService: UserService\n    ) {\n      // Ajouter des valeurs aux variables\n      this.pageTitle = `Informations utilisateur`;\n      this.textButton = {\n        edit: `Modifier les informations`,\n        save: `Enregistrer les informations`,\n        cancel: `Annuler les informations`\n      };\n      this.toggleBoxe = false;\n    };\n\n\n    /*\n    Méthodes\n    */\n      // Créer une fonction pour récupérer le paramêtre de la route\n      private getRouteParam = () => {\n        // Boucler sur le tableau de paramêtres\n        this.ActivatedRoute.params.forEach( params => {\n          // Vérifier la présence du paramêtre id\n          params['id'] ? this.getUserInfo(params['id']) : null;\n        })\n      };\n\n      // Créer une fonction pour charger les données d'un utiliateur\n      private getUserInfo = ( _id: string ) => {\n        this.UserService.getSingle( parseInt(_id) )\n        .then( apiResponse => {\n          this.singleUser = apiResponse[0];\n          this.singleUserData = {\n            userEmail:{\n              label: 'Modifier le email',\n              value: this.singleUser.email\n            },\n            userName: {\n              label: 'Modifier le nom',\n              value: this.singleUser.userName\n            },\n            userPassword: {\n              label: 'Modifier le mot de passe',\n              value: this.singleUser.password\n            }\n          }\n        })\n        .catch( apiResponse => {\n          console.error(apiResponse)\n        });\n      };\n\n      // Créer une fonction pour la validation du formulaire\n      public submitForm = ( event: RegisterModel ) => {\n        // Modifier l'objet singleUser\n        const data: UserModel = {\n          email: event.userEmail.value,\n          userName: event.userName.value,\n          password: event.userPassword.value\n        };\n\n        // Contacter le service pour modifier les données utilisateur\n        this.UserService.editUser( this.singleUser.id, data )\n        .then( apiResponse => {\n          // Mettre à jour les données utilisateur\n          this.singleUser.email = apiResponse.email;\n          this.singleUser.userName = apiResponse.userName;\n          this.singleUser.password = apiResponse.password;\n\n          // Masquer le formulaire\n          this.toggleBoxe = false;\n        })\n        .catch( apiResponse => console.error(apiResponse));\n      };\n    //\n\n\n    /*\n    Hooks Angular\n    */\n      ngOnInit() {\n        // Récupérer le paramêtre de la route\n        this.getRouteParam();\n      }\n    //\n\n  }\n//"],"sourceRoot":""}