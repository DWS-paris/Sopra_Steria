{"version":3,"sources":["webpack:///./src/app/pages/home-page/home-page.component.html","webpack:///./src/app/pages/home-page/home-page.component.ts","webpack:///./src/app/pages/home-page/module.ts","webpack:///./src/app/pages/home-page/route.ts","webpack:///./src/app/services/auth/auth.service.ts"],"names":[],"mappings":"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","file":"pages-home-page-module.js","sourcesContent":["module.exports = \"<app-header></app-header>\\n\\n<main>\\n  <section *ngIf=\\\"registerFormData\\\">\\n    <h2 [textContent]=\\\"pageTitle\\\" (click)=\\\"formToggle.register = !formToggle.register\\\"></h2>\\n\\n    <app-user-form\\n      [ngClass]=\\\"{ 'isOpen': formToggle.register }\\\"\\n      [formData]=\\\"registerFormData\\\"\\n      [formType]=\\\"'create'\\\"\\n      (sendData)=\\\"registerUser($event)\\\"\\n    >\\n    </app-user-form>\\n  </section>\\n\\n  <section>\\n      <h2 [textContent]=\\\"pageSubTitle\\\" (click)=\\\"formToggle.login = !formToggle.login\\\"></h2>\\n\\n      <form [ngClass]=\\\"{ 'isOpen': formToggle.login }\\\" (submit)=\\\"logUser()\\\">\\n        <label for=\\\"email\\\" [innerHTML]=\\\"loginFormData.email.label\\\"></label>\\n        <input \\n          type=\\\"email\\\" name=\\\"email\\\" \\n          [(ngModel)]=\\\"loginFormData.email.value\\\" \\n          (focus)=\\\"deleteError(loginFormData.email, 'Votre email')\\\"\\n        >\\n\\n        <label for=\\\"password\\\" [innerHTML]=\\\"loginFormData.password.label\\\"></label>\\n        <input \\n          type=\\\"password\\\" name=\\\"password\\\" \\n          [(ngModel)]=\\\"loginFormData.password.value\\\" \\n          (focus)=\\\"deleteError(loginFormData.password, 'Votre mot de passe')\\\"\\n        >\\n\\n        <button type=\\\"submit\\\">Connexion</button>\\n      </form>\\n  </section>\\n</main>\"","/*\nImport et configuration\n*/\n  // Angular\n  import { Component, OnInit } from '@angular/core';\n  import { Router } from \"@angular/router\";\n\n  // Inner\n  import { AuthService } from \"../../services/auth/auth.service\"; // #1 Importer le/les service/s\n  import { RegisterModel } from \"../../shared/_models/register.model\";\n  import { UserModel } from \"../../shared/_models/user.model\";\n  import { LoginModel } from \"../../shared/_models/login.model\";\n\n  // Configuration\n  @Component({\n    selector: 'app-home-page',\n    templateUrl: './home-page.component.html',\n\n    // #2 Ajouter le/les service/s dans le tableau des providers\n    providers: [ AuthService ],\n\n    styles: [`\n      form, app-user-form{\n        height: 0;\n        overflow: hidden;\n        transition: height .3s;\n      }\n\n      .isOpen{\n        height: 35rem;\n        overflow: auto;\n      }\n    `]\n  })\n//\n\n/*\nExport\n*/\n  export class HomePageComponent implements OnInit {\n\n    /*\n    Variables\n    */\n      public pageTitle: string;\n      public pageSubTitle: string;\n      public registerFormData: RegisterModel;\n      public loginFormData: LoginModel;\n      private formError: number;\n      private newUser: UserModel;\n      public formToggle: any;\n    //\n\n\n    /*\n    Ajouter des valeurs aux variables\n    */\n      constructor(\n        // Injecter le/les service/s dans le constructor\n        private AuthService: AuthService,\n        // Injecter le Router\n        private Router: Router\n      ) {\n        // Ajouter des valeurs aux variables\n        this.pageTitle = `Formulaire d'inscription`;\n        this.pageSubTitle = `Formulaire de connexion`;\n        this.formToggle = {\n          register: false,\n          login: false\n        };\n      };\n    //\n\n\n    /*\n    Méthodes\n    */\n      // Créer une fonction pour initialiser le formulaire\n      private formInit = () => {\n        this.registerFormData = {\n          userEmail: {\n            label: `Votre email`,\n            value: ``\n          },\n          userName: {\n            label: `Nom complet`,\n            value: ``\n          },\n          userPassword: {\n            label: `Votre mot de passe`,\n            value: ``\n          },\n          userRepeatPassword: {\n            label: `Répéter votre mot de passe`,\n            value: ``\n          },\n          userTos: {\n            label: `Accépter les CDG`,\n            value: false\n          }\n        };\n\n        this.loginFormData = {\n          email: {\n            label: 'Votre email',\n            value: ''\n          },\n          password: {\n            label: 'Votre mot de passe',\n            value: ''\n          }\n        };\n      };\n\n      // Créer une fonction pour l'inscription d'un utilisateur\n      public registerUser = ( event: RegisterModel ) => {\n        \n        console.log('PARENT', event)\n\n          // Ajouter les données dans l'objet newUser\n          this.newUser = {\n            email: event.userEmail.value,\n            password: event.userPassword.value,\n            userName: event.userName.value\n          };\n\n          // Contacter le service pour ajouter un utilisateur\n          this.AuthService.registerUser(this.newUser)\n          .then( apiResponse => {\n            console.log(apiResponse)\n\n            // Réinitialiser le formulaire\n            this.formInit();\n          })\n          .catch( apiResponse => console.error(apiResponse) );\n      };\n\n      // Créer une fonction pour la connexion d'un utilisateur\n      public logUser = () => {\n        // Initialiser formError\n        this.formError = 0;\n\n        // Vérifier la valeur des champs du formulaire\n        this.loginFormData.email.value.length < 6 ? this.addError(this.loginFormData.email) : null;\n        this.loginFormData.password.value.length < 2 ? this.addError(this.loginFormData.password) : null;\n\n        // Validation finale\n        if( this.formError === 0 ){\n          console.log('OK login')\n\n          // Contacter l'api\n          this.AuthService.logUser(this.loginFormData)\n          .then( apiResponse => {\n            \n            // Rediriger l'utilisateur connecté\n            apiResponse.length === 1 ? this.Router.navigateByUrl('/news') : false\n\n            // Vider le formulaire\n            this.formInit();\n          })\n          .catch( apiResponse => {\n            console.error(apiResponse)\n          })\n        }\n      }\n\n      // Créer une fonction pour ajouter une erreur au registerFormData\n      private addError = ( object ) => {\n        // Ajouter 1 à formError\n        this.formError++;\n\n        // Afficher un message d'erreur\n        object.label += `<span>Champ obligatoire</span>`\n      };\n\n      // Créer une fonction pour supprimer un message d'erreur\n      public deleteError = (object, text: string) => {\n        object.label = text\n      }\n    //\n\n\n    /*\n    Hooks Angular\n    */\n      ngOnInit() {\n        this.formInit();\n      }\n    //\n\n  }\n//","/*\nImport\n*/\n    // Angular\n    import { NgModule } from \"@angular/core\";\n    import { FormsModule } from \"@angular/forms\"; //=> Obligatoire pour l'utilisation du [(ngModel)]\n    import { CommonModule } from \"@angular/common\"; //=> Obligatoire pour ngClass, ngIf, ...\n\n    // Inner\n    import { HomePageComponent } from \"./home-page.component\";\n    import { ComponentRouter } from \"./route\";\n    import { HeaderModule } from \"../../shared/header/module\";\n    import { UserFormModule } from \"../../shared/user-form/module\";\n//\n\n\n/*\nDéfinition\n*/\n    @NgModule({\n        declarations: [ HomePageComponent ],\n        imports: [ ComponentRouter, FormsModule, CommonModule, HeaderModule, UserFormModule ]\n    })\n//\n\n\n/*\nExport\n*/\n    export class Module{};\n//","/*\nImport\n*/\n    // Angular\n    import { ModuleWithProviders } from \"@angular/core\";\n    import { Routes, RouterModule } from \"@angular/router\";\n\n    // Inner\n    import { HomePageComponent } from \"./home-page.component\";\n//\n\n/*\nDéfinir les routes dans un tableau de Routes\n*/\n    const routes: Routes = [\n        {\n            path: '',\n            component: HomePageComponent\n        }\n    ];\n//\n\n/*\nExporter les routes\n*/\n    export const ComponentRouter: ModuleWithProviders = RouterModule.forChild(routes);\n//","/*\nImport\n*/\n  // Angular\n  import { Injectable } from '@angular/core';\n  import { HttpClient, HttpHeaders } from \"@angular/common/http\"; // Pour les requêtes HTTP\n  \n  // import 'rxjs/add/operator/toPromise' TODO: vérifier toPromise\n\n  // Inner\n  import { UserModel } from \"../../shared/_models/user.model\";\n  import { LoginModel } from \"../../shared/_models/login.model\";\n// \n\n\n\n/*\nConfiguration et export\n*/\n  @Injectable({\n    providedIn: 'root'\n  })\n\n  export class AuthService {\n\n    /*\n    Variables\n    */\n      private apiUrl: string;\n    //\n\n    constructor(\n      // Injecter HttpClient dans la class\n      private HttpClient: HttpClient\n    ) { \n      // Ajouter des valeurs aux variables\n      this.apiUrl = `http://localhost:3000/user`;\n    };\n\n\n    /*\n    Méthodes\n    */\n      public registerUser = ( data: UserModel ): Promise<any> => {\n        // Configurer le header de la requête\n        let myHeader = new HttpHeaders;\n        myHeader.append('Content-Type', 'application/json');\n\n        // Requête qui retourne un Promise (asynchrone)\n        return this.HttpClient.post(`${this.apiUrl}`, data, { headers: myHeader })\n        .toPromise().then(this.getData).catch(this.handleError)\n      };\n\n      public logUser = ( data: LoginModel ): Promise<any> => {\n        // Configurer le header de la requête\n        let myHeader = new HttpHeaders;\n        myHeader.append('Content-Type', 'application/json');\n\n        return this.HttpClient.get(\n          `${this.apiUrl}?email=${data.email.value}&password=${data.password.value}`,\n          { headers: myHeader })\n          .toPromise().then(this.getData).catch(this.handleError)\n      }\n    //\n\n\n    /*\n    Traitement des retours API\n    */\n      private getData = (apiResponse) => {\n        return Promise.resolve( apiResponse || {} );\n      };\n\n      private handleError = (error) => {\n        return Promise.reject(error);\n      };\n    //\n  }\n//"],"sourceRoot":""}