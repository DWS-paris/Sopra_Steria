{"version":3,"sources":["webpack:///./src/app/services/user/user.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;EAEE;AACA,UAAU;AACiC;AACoB,CAAC,yBAAyB;AAI3F,GAAG;AAIH;;EAEE;AAKA;IAME,EAAE;IAEF;IACE,oCAAoC;IAC5B,UAAsB;QAFhC,iBAMC;QAJS,eAAU,GAAV,UAAU,CAAY;QAOhC;;UAEE;QACA,4DAA4D;QACrD,aAAQ,GAAG;YAChB,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,GAAG,CAAE,KAAG,KAAI,CAAC,MAAQ,CAAE;iBAC3C,SAAS,EAAE,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;QAC3D,CAAC;QAED,8DAA8D;QACvD,cAAS,GAAG,UAAE,GAAW;YAC9B,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,GAAG,CACrB,KAAI,CAAC,MAAM,YAAO,GAAK,CAAC;iBAC1B,SAAS,EAAE,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;QAC3D,CAAC;QAED,gEAAgE;QACzD,aAAQ,GAAG,UAAE,GAAW,EAAE,IAAe;YAC9C,MAAM,CAAC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAI,KAAI,CAAC,MAAM,SAAI,GAAK,EAAE,IAAI,CAAC;iBAC1D,SAAS,EAAE,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;QACzD,CAAC;QACH,EAAE;QAGF;;UAEE;QACQ,YAAO,GAAG,UAAC,WAAW;YAC5B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAE,WAAW,IAAI,EAAE,CAAE,CAAC;QAC9C,CAAC,CAAC;QAEM,gBAAW,GAAG,UAAC,KAAK;YAC1B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC;QAtCF,oCAAoC;QACpC,IAAI,CAAC,MAAM,GAAG,4BAA4B,CAAC;IAC7C,CAAC;IAAA,CAAC;IAdS,WAAW;QAJvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAYsB,+DAAU;OAVrB,WAAW,CAoDvB;IAAD,kBAAC;CAAA;AApDuB;AAqD1B,EAAE","file":"common.js","sourcesContent":["/*\nImport\n*/\n  // Angular\n  import { Injectable } from '@angular/core';\n  import { HttpClient, HttpHeaders } from \"@angular/common/http\"; // Pour les requêtes HTTP\n\n  // Inner\n  import { UserModel } from \"../../shared/_models/user.model\";\n// \n\n\n\n/*\nConfiguration et export\n*/\n  @Injectable({\n    providedIn: 'root'\n  })\n\n  export class UserService {\n\n    /*\n    Variables\n    */\n      private apiUrl: string;\n    //\n\n    constructor(\n      // Injecter HttpClient dans la class\n      private HttpClient: HttpClient\n    ) { \n      // Ajouter des valeurs aux variables\n      this.apiUrl = `http://localhost:3000/user`;\n    };\n\n\n    /*\n    Méthodes\n    */\n      // Créer une fonction pour charger la liste des utilisateurs\n      public getUsers = (): Promise<any> => {\n        return this.HttpClient.get( `${this.apiUrl}` )\n          .toPromise().then(this.getData).catch(this.handleError)\n      }\n\n      // Créer une fonction pour chager les données d'un utilisateur\n      public getSingle = ( _id: number ): Promise<any> => {\n        return this.HttpClient.get(\n          `${this.apiUrl}?id=${_id}`)\n          .toPromise().then(this.getData).catch(this.handleError)\n      }\n\n      // Créer une fonction pour modifier les données d'un utilisateur\n      public editUser = ( _id: number, data: UserModel ): Promise<any> => {\n        return this.HttpClient.patch(`${this.apiUrl}/${_id}`, data)\n        .toPromise().then(this.getData).catch(this.handleError)\n      }\n    //\n\n\n    /*\n    Traitement des retours API\n    */\n      private getData = (apiResponse) => {\n        return Promise.resolve( apiResponse || {} );\n      };\n\n      private handleError = (error) => {\n        return Promise.reject(error);\n      };\n    //\n  }\n//"],"sourceRoot":""}